# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a Ubuntu 22.04 runner

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Environment Setup
      # Set up the CMake environment
      run: sudo apt install -y cmake build-essential gcc g++ ninja-build cppcheck valgrind lcov gcovr doxygen graphviz python3-pip python3-setuptools python3-wheel libgtest-dev; cd /usr/src/gtest; sudo cmake CMakeLists.txt; sudo make; sudo cp *.a /usr/lib

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./build/test/test
    
    - name: Code Coverage
      working-directory: ${{github.workspace}}/build
      run: |
        cmake --build . --target coverage
        lcov --list coverage.info.cleaned
        bash <(curl -s https://codecov.io/bash) -f coverage.info.cleaned

    - name: Static Analysis
      working-directory: ${{github.workspace}}/build
      run: cppcheck --enable=all --inconclusive --force --inline-suppr --quiet --xml --xml-version=2 --output-file=cppcheck.xml ../src

    - name: Documentation
      working-directory: ${{github.workspace}}/build
      run: |
        cmake --build . --target docs
        doxygen Doxyfile

    - name: Valgrind
      working-directory: ${{github.workspace}}/build
      run: valgrind --leak-check=full ./test/test

    - name: Memory Leak Check
      working-directory: ${{github.workspace}}/build
      run: valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all ./test/test

    - name: Code Coverage Report
      run: gcovr -r . --xml-pretty -o coverage.xml

    - name: Upload Code Coverage
      uses: codecov/codecov-action@v2
      with:
        file: coverage.xml
        fail_ci_if_error: true

    - name: Upload cppcheck report
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: ${{github.workspace}}/build/cppcheck.xml

    - name: Upload Doxygen Documentation
      uses: actions/upload-artifact@v2
      with:
        name: doxygen-docs
        path: ${{github.workspace}}/build/docs/html

    - name: Upload GTest
      uses: actions/upload-artifact@v2
      with:
        name: gtest
        path: /usr/src/gtest

    - name: Upload Code Coverage Report
      uses: actions/upload-artifact@v2
      with:
        name: code-coverage
        path: ${{github.workspace}}/build/coverage.xml
